// <auto-generated />
using System;
using AdminSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdminSystem.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.MenuAggregate.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<int>("CreateUserId");

                    b.Property<string>("DeepPath");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<int>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("MenuFuntionType");

                    b.Property<string>("MenuIcon");

                    b.Property<string>("MenuName");

                    b.Property<string>("MenuNo");

                    b.Property<string>("MenuUrl");

                    b.Property<string>("Order");

                    b.Property<string>("PMenuNo");

                    b.Property<int>("PlatformType");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<int>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.RoleAggregate.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<int>("CreateUserId");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<int>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("RoleDescr");

                    b.Property<string>("RoleName");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<int>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.UserAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<int>("CreateUserId");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<int>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Pwd");

                    b.Property<string>("Sex");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<int>("UpdateUserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.UserAggregate.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int>("Id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.UserAggregate.ApplicationUser", b =>
                {
                    b.OwnsOne("AdminSystem.Domain.AggregatesModel.UserAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ApplicationUserId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("FullAddress");

                            b1.Property<string>("Province");

                            b1.Property<string>("Street");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("ApplicationUsers");

                            b1.HasOne("AdminSystem.Domain.AggregatesModel.UserAggregate.ApplicationUser")
                                .WithOne("Address")
                                .HasForeignKey("AdminSystem.Domain.AggregatesModel.UserAggregate.Address", "ApplicationUserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("AdminSystem.Domain.AggregatesModel.UserAggregate.UserRole", b =>
                {
                    b.HasOne("AdminSystem.Domain.AggregatesModel.RoleAggregate.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdminSystem.Domain.AggregatesModel.UserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoleList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
